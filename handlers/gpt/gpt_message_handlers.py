from aiogram import types, Bot

from telebot import TeleBot

from threading import Thread
from utils.async_process_runner import start as async_functions_process_starter
from utils.users.users import active_now
from utils.database.folder_worker import get_dictionary, create_or_dump_user
from utils.pro.pro_subscription_worker import is_pro
from utils.chatgpt.requests_counter import get_amount_of_requests_for_user
from utils.aiogram_functions_worker import send_message, try_edit_or_send_message
from handlers.gpt.gpt_functions import change_gpt_version, generate_and_send_answer, clear_chat_gpt_conversation, add_user_to_queue_and_start_generating
from data.config import get_max_tokens_in_response_for_user, ADMINS
from handlers.states.user_state import UserState
from handlers.bot import BotInfo
from handlers.start.start_handler import start


async def chat_gpt_messages_handler(message: types.Message, bot_instance: BotInfo) -> None:
    if message.text == '‚Ü© –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await start(message, bot_instance)
    elif message.text == 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞':
        await clear_chat_gpt_conversation(message, bot_instance)
    elif message.text in ['üîÅ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ gpt-4',  'üîÅ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ gpt-3.5-turbo']:
        await change_gpt_version(message, bot_instance)
    else:
        await generate_and_send_answer(message.chat.id, message.from_user.id, message.text, bot_instance)


async def chat_gpt_starter(message, bot_instance: BotInfo) -> None:
    if isinstance(message, types.Message):
        chat_id = message.chat.id
    else:
        chat_id = message.message.chat.id
    Thread(target=async_functions_process_starter, args=(active_now, [str(message.from_user.id), chat_id, bot_instance.bot_id])).start()
    dictionary_used_in_this_function = await get_dictionary(str(message.from_user.id), bot_instance.bot_id, 2)
    try:
        model = dictionary_used_in_this_function['selected_model']
    except KeyError:
        model = 'gpt-3.5-turbo'
    text = 'ü§ñ –ü—Ä–∏–≤–µ—Ç, —è *–ò–ò –°hat GPT*. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å ' \
            '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç–∏—Ç—å. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ. –û—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞. ' \
            '\n\n‚ú® –í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è 3 —Å–ø–æ—Å–æ–±–∞–º–∏:\n1) –û—Ç–ø—Ä–∞–≤–∏–≤ *—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n2) –û—Ç–ø—Ä–∞–≤–∏–≤ ' \
            '*–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º* (–≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ë–æ—Ç –ø–æ–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ ' \
            '–≤—ã—Ä–∞–∂–µ–Ω–∏—è (–¥—Ä–æ–±–∏, –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ —Ç.–ø.). *–ù–µ —Å–ª–µ–¥—É–µ—Ç* –ø—ã—Ç–∞—Ç—å—Å—è —Ä–µ—à–∏—Ç—å –∏—Ö –ø—Ä–∏ –ø–æ–º–æ—â–∏ –Ω–µ–≥–æ.\n3) ' \
            '–û—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º (–¥–æ—Å—Ç—É–ø–Ω–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π PRO).'
    has_pro = await is_pro(message.from_user.id)
    rest_of_amount_of_image_sending, amount_of_unsucessful_requests_to_ocr_api = (
        ((50 if has_pro else 7) if str(message.from_user.id) not in ADMINS else 1000) -
        (await get_amount_of_requests_for_user("./data/databases/quantity_of_requests.sqlite3", "quantity_of_requests_to_ocr_space",
                                                message.from_user.id)),
        await get_amount_of_requests_for_user("./data/databases/quantity_of_requests.sqlite3",
                                                "quantity_of_unsuccessful_requests_to_ocr_space",
                                                message.from_user.id))
    if rest_of_amount_of_image_sending > 0 and amount_of_unsucessful_requests_to_ocr_api < 35:
        text += f'\n\nüñº –°–µ–≥–æ–¥–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—â–µ {rest_of_amount_of_image_sending} —Ä–∞–∑.'
    else:
        text += f'\n\nüñº –í—ã –≤–Ω–æ–≤—å —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤—Ç—Ä–∞.'
    text += f'\n\nüöÄ –Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –¥–≤–µ –º–æ–¥–µ–ª–∏:\n1) *gpt-3.5-turbo - *—Å–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∏ –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å –≤ —Å–µ–º–µ–π—Å—Ç–≤–µ GPT, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞ –∏ –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞. –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: {await get_max_tokens_in_response_for_user(has_pro)}.\n2) *gpt-4-bing* - –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ —Å–µ–º–µ–π—Å—Ç–≤–µ ChatGPT, —Å–ø–æ—Å–æ–±–Ω–∞ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ò–º–µ–µ—Ç *–¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç* –∏ *–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–º* –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ—á–∏–Ω–µ–Ω–∏–π, —Ä–µ—Ñ–µ—Ä–∞—Ç–æ–≤, –∏ —Ç.–ø. –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: {await get_max_tokens_in_response_for_user(has_pro)}.\n\n*–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤* –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∫c–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é *–¥–ª–∏–Ω—É –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞*. 1 —Ç–æ–∫–µ–Ω –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–µ–Ω 3 —Å–∏–º–≤–æ–ª–∞–º.'
    if has_pro:
        text += '\n\nüíé –ü–æ—Å–∫–æ–ª—å–∫—É –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º ReshenijaBot PRO, –ª–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤ —É–¥–≤–æ–µ–Ω—ã.'
    if ('id_of_message_with_markup' not in dictionary_used_in_this_function or not
    dictionary_used_in_this_function['id_of_message_with_markup']):
        chatgpt_main_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        chatgpt_main_markup.add(types.KeyboardButton(text='üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞'))
        chatgpt_main_markup.add(types.KeyboardButton(text=f"üîÅ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ {'gpt-4' if (model == 'gpt-3.5-turbo' or not model) else 'gpt-3.5-turbo'}"))
        chatgpt_main_markup.add(types.KeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        await send_message(user_id=message.from_user.id, bot=bot_instance.bot, bot_id=bot_instance.bot_id, chat_id=chat_id, text='üü¢',
                            reply_markup=chatgpt_main_markup, do_not_add_ads=True)
        message_id = await send_message(user_id=message.from_user.id, bot=bot_instance.bot, bot_id=bot_instance.bot_id,
                                        chat_id=chat_id,
                                        text=text, parse_mode='markdown')
    else:
        message_id = await try_edit_or_send_message(user_id=message.from_user.id, bot=bot_instance.bot, bot_id=bot_instance.bot_id,
                                                    chat_id=chat_id,
                                                    text=text,
                                                    message_id=dictionary_used_in_this_function[
                                                        'id_of_message_with_markup'],
                                                    parse_mode='markdown')
    dictionary_used_in_this_function['id_of_message_with_markup'] = message_id
    Thread(target=async_functions_process_starter, args=(create_or_dump_user, [str(message.from_user.id), bot_instance.bot_id, str(dictionary_used_in_this_function), 2])).start()
    await UserState.chat_gpt_worker.set()


async def chat_gpt_task_handler(message: types.Message, bot_instance: BotInfo) -> None:
    dictionary_used_in_this_function = await get_dictionary(str(message.from_user.id), bot_instance.bot_id, 2)
    if message.text == '‚Ü© –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await start(message, bot_instance)
    elif message.text == 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞':
        await clear_chat_gpt_conversation(message, bot_instance)
    elif message.text in ['üîÅ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ gpt-4',  'üîÅ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ gpt-3.5-turbo']:
        await change_gpt_version(message, bot_instance)
    else:
        try:
            Thread(target=async_functions_process_starter, args=(create_or_dump_user, [str(message.from_user.id), bot_instance.bot_id, str(dictionary_used_in_this_function), 2])).start()
            await add_user_to_queue_and_start_generating(message, bot_instance)
        except Exception as e:
            try:
                await bot_instance.bot.delete_message(message.chat.id, message.message_id)
            except Exception:
                pass